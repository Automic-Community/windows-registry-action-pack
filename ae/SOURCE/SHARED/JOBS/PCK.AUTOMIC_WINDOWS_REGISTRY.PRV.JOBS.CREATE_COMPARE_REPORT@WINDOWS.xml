<?xml version="1.0" encoding="ISO-8859-15" standalone="no"?><uc-export clientvers="11.0.0">
<JOBS_WINDOWS AttrType="WINDOWS" name="PCK.AUTOMIC_WINDOWS_REGISTRY.PRV.JOBS.CREATE_COMPARE_REPORT@WINDOWS">
<XHEADER state="1">
<Title>Create compare report</Title>
<ArchiveKey1/>
<ArchiveKey2/>
<Active>1</Active>
<OH_SubType/>
<CustomAttributes KeyListID="0" dataRequestID="0"/>
</XHEADER>
<OUTPUTREG state="1">
<FileReg/>
</OUTPUTREG>
<SYNCREF state="1">
<Syncs/>
</SYNCREF>
<ATTR_JOBS state="1">
<Queue>CLIENT_QUEUE</Queue>
<StartType/>
<HostDst>|&lt;WIN&gt;|HOST</HostDst>
<HostATTR_Type>WINDOWS</HostATTR_Type>
<CodeName/>
<Login/>
<IntAccount/>
<ExtRepDef>1</ExtRepDef>
<ExtRepAll>0</ExtRepAll>
<ExtRepNone>0</ExtRepNone>
<AutoDeactNo>1</AutoDeactNo>
<AutoDeact1ErrorFree>0</AutoDeact1ErrorFree>
<AutoDeactErrorFree>0</AutoDeactErrorFree>
<DeactWhen/>
<DeactDelay>0</DeactDelay>
<AutoDeactAlways>0</AutoDeactAlways>
<AttDialog>0</AttDialog>
<ActAtRun>1</ActAtRun>
<Consumption>0</Consumption>
<UC4Priority>0</UC4Priority>
<MaxParallel2>0</MaxParallel2>
<MpElse1>1</MpElse1>
<MpElse2>0</MpElse2>
<TZ/>
</ATTR_JOBS>
<ATTR_WINDOWS state="1">
<OutputDb>1</OutputDb>
<OutputDbErr>0</OutputDbErr>
<OutputFile>0</OutputFile>
<IsGenerated>0</IsGenerated>
<BAT>0</BAT>
<COM>0</COM>
<WinBatch>1</WinBatch>
<Standard>1</Standard>
<Minimized>0</Minimized>
<Maximized>0</Maximized>
<JObjDefault>0</JObjDefault>
<JObjYes>1</JObjYes>
<JObjNo>0</JObjNo>
<WorkingDirectory>c:\</WorkingDirectory>
<Command/>
<LogOn>0</LogOn>
<ShowJob>0</ShowJob>
</ATTR_WINDOWS>
<RUNTIME state="1">
<MaxRetCode>0</MaxRetCode>
<MrcExecute/>
<MrcElseE>0</MrcElseE>
<FcstStatus>0| |</FcstStatus>

<ErtMethodDef>1</ErtMethodDef>
<ErtMethodFix>0</ErtMethodFix>
<ErtFix>0</ErtFix>
<ErtDynMethod>2|Average</ErtDynMethod>
<ErtMethodDyn>0</ErtMethodDyn>
<ErtCnt>0</ErtCnt>
<ErtCorr>0</ErtCorr>
<ErtIgn>0</ErtIgn>
<ErtIgnFlg>0</ErtIgnFlg>
<ErtMinCnt>0</ErtMinCnt>
<MrtMethodNone>1</MrtMethodNone>
<MrtMethodFix>0</MrtMethodFix>
<MrtFix>0</MrtFix>
<MrtMethodErt>0</MrtMethodErt>
<MrtErt>0</MrtErt>
<MrtMethodDate>0</MrtMethodDate>
<MrtDays>0</MrtDays>
<MrtTime>00:00</MrtTime>
<MrtTZ/>
<SrtMethodNone>1</SrtMethodNone>
<SrtMethodFix>0</SrtMethodFix>
<SrtFix>0</SrtFix>
<SrtMethodErt>0</SrtMethodErt>
<SrtErt>0</SrtErt>
<MrtCancel>0</MrtCancel>
<MrtExecute>0</MrtExecute>
<MrtExecuteObj/>
</RUNTIME>
<DYNVALUES state="1">
<dyntree>
<node content="1" id="VALUE" name="Variables" parent="" type="VALUE">
<VALUE state="1">
<Values/>
<Mode>0</Mode>
</VALUE>
</node>
</dyntree>
</DYNVALUES>
<ROLLBACK state="1">
<RollbackFlag>0</RollbackFlag>
<CBackupObj/>
<CRollbackObj/>
<FBackupPath/>
<FDeleteBefore>0</FDeleteBefore>
<FInclSubDirs>0</FInclSubDirs>
</ROLLBACK>
<PRE_SCRIPT mode="1" replacementmode="1" state="1">
<PSCRI><![CDATA[:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.PREPARE_JOB]]></PSCRI>
</PRE_SCRIPT>
<SCRIPT mode="1" state="1">
<MSCRI><![CDATA[:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHANGE_DIRECTORY_TO_AGENT_BIN
:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS

$agentpath=get-location

$snapshotFolder=join-path $agentpath "snapshot\&UC4RB_SNAPSHOT_GUID#"

$reportFile="$snapshotFolder\compare_&$ACTIVATOR_RUNID#.xml"
$overviewReportFile="$snapshotFolder\OverviewSnapBOM.xml"

$guid="&UC4RB_SNAPSHOT_GUID#"
### read registry key path from Overview report
$snapXml=[XML](Get-Content $overviewReportFile)
$path=$snapXml.registrySnapshot.regPath

$currentDateTime=get-date -format "d/MM/%y HH:%m:%s"
###
# First create an overview report again
###

set-location registry::$path
$exitCode=$?
$xmlDoc='<?xml version="1.0" encoding="UTF-8"?>
<registrySnapshot date="' + $currentDateTime + '" guid="'+$guid+'" regPath="'+$path+'" type="reg" >'
if ( $exitCode ) {
  $dirs=,$path + (get-childitem . -rec|select-object -expand name)
  foreach ($j in $dirs)
  {
    set-location registry::$j
    $keyPath=(get-item . |select-object -expand name)
    if ( -not $keyPath ) {
      continue
    }
    $loc='<key path="'+$keyPath+'" >'
    $xmlDoc=$xmlDoc+$loc
    $props=(get-item . |select-object -expand property)

    foreach ($i in $props)
    {
      $value=get-itemproperty . $i |select-object -expand $i
      $str= '<property name="'+$i+'"  value="'+$value+'"/>'
      $xmlDoc=$xmlDoc+$str
    }
    $xmlDoc=$xmlDoc+"</key>"
  }
}
$xmlDoc=$xmlDoc+"</registrySnapshot>"
$doc=[xml]$xmlDoc
$doc.Save("$snapshotFolder\new-ov.xml")
###
#Compare original overview report with a new one
###
$compRepXml='<?xml version="1.0" encoding="UTF-8"?>
<registrySnapshot date="' + $currentDateTime + '" guid="'+$guid+'" regPath="'+$path+'" type="reg" >'

$xpath="/registrySnapshot/key"
$a=select-xml $snapXml -xpath $xpath
### checking if anything was deleted
foreach ($i in $a) {
  $attr=$i.Node.path
  $xquery='/registrySnapshot/key[@path="'+$attr+'"]'
  $res=select-xml $xquery $doc
  if ( ! $res ){
    if ( $attr -eq $Null ) {
       continue;
    }
    write-output "===snapshot is inconsistent==="
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="deleted"/>'
  } else {
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="equal"/>'
  }
  $xquery=$xquery+'/property'
  $props=select-xml $xquery $snapXml
  foreach($j in $props){
    $propName=$j.Node.name
    $propValue=$j.Node.value
    $lxquery=$xquery+'[@name="'+$propName+'"]'
    $lres=select-xml $lxquery $doc
    if (( ! $lres) -and ( $propName )) {
      write-output "===snapshot is inconsistent==="
      $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="deleted"/>'
    } else {
      $snapPropValue=$j.Node.value
      $regPropValue=$lres.Node.value
      write-output "snapPropValue:$snapPropValue"
      write-output "regPropValue:$regPropValue"
      if (( $snapPropValue -cne $regPropValue ) -and ( $propName )) {
        write-output "===snapshot is inconsistent==="
        $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" oldValue="'+$snapPropValue+'" newValue="'+$regPropValue+'" state="changed"/>'
      } else {
        $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="equal"/>'
      }
    }
  }
}
##################
#checking if anything was added
$xpath="/registrySnapshot/key"
#select all keys from current registry
$a=select-xml $doc -xpath $xpath

foreach ($i in $a) {
  $attr=$i.Node.path
  if ( ! $attr ) {
    continue
  }
  $xquery='/registrySnapshot/key[@path="'+$attr+'"]'
  # select the same path from original snapshot
  $res=select-xml $xquery $snapXml
  # if the same path not found in the new document check the nested levels
  if ( ! $res ){
    write-output "===snapshot is inconsistent==="
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="added"/>'
  }
  #checking what added beneath
  $xquery=$xquery+'/property'
  $props=select-xml $xquery $doc
  foreach($j in $props){
    $propName=$j.Node.name
    $propValue=$j.Node.value
    $lxquery=$xquery+'[@name="'+$propName+'"]'
    $lres=select-xml $lxquery $snapXml
    if (( ! $lres) -and ( $propName )) {
       write-output "===snapshot is inconsistent==="
       $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="added"/>'
    }
  }
}
$compRepXml=$compRepXml+"</registrySnapshot>"
$compRepDoc=[xml]$compRepXml
$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($False)
$w = New-Object System.Xml.XmlTextWriter($reportFile, $Utf8NoBomEncoding)
$compRepDoc.Save($w)
$w.Close()

:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS
:PSET &UC4RB_OUT_REPORT_FILE#="&UC4RB_AGENT_WORKING_DIR#\snapshot\&UC4RB_SNAPSHOT_GUID#\compare_&$ACTIVATOR_RUNID#.xml"]]></MSCRI>
</SCRIPT>
<OUTPUTSCAN state="1">
<Inherit>N</Inherit>
<filterobjects/>
<HostFsc/>
<LoginFsc/>
</OUTPUTSCAN>
<POST_SCRIPT mode="1" replacementmode="1" state="1">
<OSCRI><![CDATA[:  SET &hnd# = PREP_PROCESS_REPORT("JOBS",,"REP")
:  PROCESS &hnd#
:    SET &LINE# = GET_PROCESS_LINE(&hnd#)
:     IF &LINE# = "===snapshot is inconsistent==="
:       PSET &UC4RB_CONTENT_STATUS#="Inconsistent"
:       TERM_PROCESS
:     ENDIF
:  ENDPROCESS]]></OSCRI>
</POST_SCRIPT>
<DOCU_Docu state="1" type="text">
<DOC/>
</DOCU_Docu>
</JOBS_WINDOWS>
</uc-export>